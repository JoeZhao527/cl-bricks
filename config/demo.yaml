# Data configurations
data:
  # number of k-fold cross validation
  n_splits: 2

  # random seed for k-fold split
  random_state: 42

  # normalization bin numbers
  normalization_bin_num: 1000

  # features with correlation smaller than this threshold will be 
  # considered for feature crossing
  feature_crossing_thr: 0.2

  # Input data paths
  paths:
    # label of training data, raw file downloaded from aicrowd/bricks-by-bricks
    train_y_path: ./downloads/train_y_v0.1.0.csv

    # training signal, raw file downloaded from aicrowd/bricks-by-bricks
    train_zip_path: ./downloads/train_X_v0.1.0.zip

    # testing signal, raw file downloaded from aicrowd/bricks-by-bricks
    test_zip_path: ./downloads/test_X_v0.1.0.zip

    # processed train data
    train_x_paths:
      # features from full signal
      - ./downloads/train_data_features_v3_fixed/train_features_full_v3.csv

    # processed train data
    test_x_paths:
      # features from full signal
      - ./downloads/test_data_features_v3_fixed/test_features_full_v3.csv

# Model configurations
model:
  # XGBoost configurations
  xgb:
    # model name in ensemble.model.model_zoo.model_zoo
    model_cls: xgboost      

    # model's hyper-parameters  
    model_params:
      device: cuda
      n_estimators: 2
      learning_rate: 0.3
      max_depth: 6
      min_child_weight: 1
      subsample: 0.8
      colsample_bytree: 0.8
      gamma: 0
      reg_alpha: 0
      reg_lambda: 1
      random_state: 42
      eval_metric: logloss
      n_jobs: 20
    
    # None sampling threshold for each tier's model training
    none_ratio_thr_list:
      - 0.1
      - 0.15
      - 0.35
      - 0.75
      - 0.85

    # class weight configuration path
    class_weights_path: ./config/class_weights/xgb_class_weight.yaml
  
  # Random Forest configurations
  rf:
    model_cls: random_forest
    model_params:
      n_estimators: 2
      random_state: 42
      n_jobs: 20
    none_ratio_thr_list:
      - 0.1
      - 0.15
      - 0.35
      - 0.75
      - 0.85
    class_weights_path: ./config/class_weights/rf_class_weight.yaml

# Whether to save trained checkpoints. Will only be used when train=True
save_models: True

# Whether to train the model. If False, it will load the models
# under `trained_model_dir` to predict provided samples
train: True

# Whether to make prediction. If False, will skip the prediction and testing
test: True

# Directory that saves the trained model checkpoints
trained_model_dir: null

# output directory
output_base: ./logs/ensemble/base_ensemble