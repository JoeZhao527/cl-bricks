{
    "spectral": {
      "Spectrogram mean coefficient": {
        "complexity": "constant",
        "description": "Calculates the average value for each frequency in the spectrogram over the entire duration of the signal.",
        "function": "tsfel.spectrogram_mean_coeff",
        "parameters": {
          "fs": 100,
          "bins": 32
        },
        "n_features": "bins",
        "use": "yes"
      },
      "Fundamental frequency": {
        "complexity": "log",
        "description": "Computes the fundamental frequency.",
        "function": "tsfel.fundamental_frequency",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes"
      },
      "Human range energy": {
        "complexity": "log",
        "description": "Computes the human range energy ratio given by the ratio between the energy in frequency 0.6-2.5Hz and the whole energy band.",
        "function": "tsfel.human_range_energy",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes",
        "tag": "inertial"
      },
      "Max power spectrum": {
        "complexity": "log",
        "description": "Computes the maximum power spectrum density.",
        "function": "tsfel.max_power_spectrum",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes"
      },
      "Maximum frequency": {
        "complexity": "log",
        "description": "Computes the maximum frequency.",
        "function": "tsfel.max_frequency",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes"
      },
      "Median frequency": {
        "complexity": "log",
        "description": "Computes the median frequency.",
        "function": "tsfel.median_frequency",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes"
      },
      "Power bandwidth": {
        "complexity": "log",
        "description": "Computes power spectrum density bandwidth of the signal.",
        "function": "tsfel.power_bandwidth",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes"
      },
      "Spectral centroid": {
        "complexity": "linear",
        "description": "Computes the barycenter of the spectrum.",
        "function": "tsfel.spectral_centroid",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes",
        "tag": "audio"
      },
      "Spectral decrease": {
        "complexity": "log",
        "description": "Computes the amount of decreasing of the spectra amplitude.",
        "function": "tsfel.spectral_decrease",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes"
      },
      "Spectral distance": {
        "complexity": "log",
        "description": "Computes the signal spectral distance.",
        "function": "tsfel.spectral_distance",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes"
      },
      "Spectral entropy": {
        "complexity": "log",
        "description": "Computes the spectral entropy of the signal based on Fourier transform.",
        "function": "tsfel.spectral_entropy",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes",
        "tag": "eeg"
      },
      "Spectral kurtosis": {
        "complexity": "linear",
        "description": "Computes the flatness of a distribution around its mean value.",
        "function": "tsfel.spectral_kurtosis",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes"
      },
      "Spectral positive turning points": {
        "complexity": "log",
        "description": "Computes number of positive turning points of the fft magnitude signal",
        "function": "tsfel.spectral_positive_turning",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes"
      },
      "Spectral roll-off": {
        "complexity": "log",
        "description": "Computes the frequency where 95% of the signal magnitude is contained below of this value.",
        "function": "tsfel.spectral_roll_off",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes",
        "tag": "audio"
      },
      "Spectral roll-on": {
        "complexity": "log",
        "description": "Computes the frequency where 5% of the signal magnitude is contained below of this value.",
        "function": "tsfel.spectral_roll_on",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes"
      },
      "Spectral skewness": {
        "complexity": "linear",
        "description": "Computes the asymmetry of a distribution around its mean value.",
        "function": "tsfel.spectral_skewness",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes"
      },
      "Spectral slope": {
        "complexity": "log",
        "description": "Computes the spectral slope, obtained by linear regression of the spectral amplitude.",
        "function": "tsfel.spectral_slope",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes"
      },
      "Spectral spread": {
        "complexity": "linear",
        "description": "Computes the spread of the spectrum around its mean value.",
        "function": "tsfel.spectral_spread",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes"
      },
      "Spectral variation": {
        "complexity": "log",
        "description": "Computes the amount of variation of the spectrum along time.",
        "function": "tsfel.spectral_variation",
        "parameters": {
          "fs": 100
        },
        "n_features": 1,
        "use": "yes"
      },
      "Wavelet absolute mean": {
        "complexity": "linear",
        "description": "Computes CWT absolute mean value of each wavelet scale.",
        "function": "tsfel.wavelet_abs_mean",
        "parameters": {
            "fs": 100,
            "max_width": 10,
            "wavelet": "mexh"
        },
        "tag": [
            "eeg",
            "ecg"
        ],
        "n_features": "max_width",
        "use": "yes"
      },
      "Wavelet energy": {
          "complexity": "linear",
          "description": "Computes CWT energy of each wavelet scale.",
          "function": "tsfel.wavelet_energy",
          "parameters": {
              "fs": 100,
              "max_width": 10,
              "wavelet": "mexh"
          },
          "tag": "eeg",
          "n_features": "max_width",
          "use": "yes"
      },
      "Wavelet entropy": {
          "complexity": "linear",
          "description": "Computes CWT entropy of the signal.",
          "function": "tsfel.wavelet_entropy",
          "parameters": {
              "fs": 100,
              "max_width": 10,
              "wavelet": "mexh"
          },
          "tag": "eeg",
          "n_features": "max_width",
          "use": "yes"
      },
      "Wavelet standard deviation": {
          "complexity": "linear",
          "description": "Computes CWT std value of each wavelet scale.",
          "function": "tsfel.wavelet_std",
          "parameters": {
              "fs": 100,
              "max_width": 10,
              "wavelet": "mexh"
          },
          "n_features": "max_width",
          "use": "yes"
      },
      "Wavelet variance": {
          "complexity": "linear",
          "description": "Computes CWT variance value of each wavelet scale.",
          "function": "tsfel.wavelet_var",
          "parameters": {
              "fs": 100,
              "max_width": 10,
              "wavelet": "mexh"
          },
          "tag": "eeg",
          "n_features": "max_width",
          "use": "yes"
      }
      
      }
}